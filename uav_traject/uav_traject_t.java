/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package uav_traject;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class uav_traject_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public byte num_keyframe;
    public byte order_p_1;
    public double t[];
    public double traject[][][];
 
    public uav_traject_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x54c0ef43ff70018aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(uav_traject.uav_traject_t.class))
            return 0L;
 
        classes.add(uav_traject.uav_traject_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeByte(this.num_keyframe); 
 
        outs.writeByte(this.order_p_1); 
 
        for (int a = 0; a < this.num_keyframe; a++) {
            outs.writeDouble(this.t[a]); 
        }
 
        for (int a = 0; a < this.num_keyframe; a++) {
            for (int b = 0; b < this.order_p_1; b++) {
                for (int c = 0; c < 4; c++) {
                    outs.writeDouble(this.traject[a][b][c]); 
                }
            }
        }
 
    }
 
    public uav_traject_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public uav_traject_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static uav_traject.uav_traject_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        uav_traject.uav_traject_t o = new uav_traject.uav_traject_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.num_keyframe = ins.readByte();
 
        this.order_p_1 = ins.readByte();
 
        this.t = new double[(int) num_keyframe];
        for (int a = 0; a < this.num_keyframe; a++) {
            this.t[a] = ins.readDouble();
        }
 
        this.traject = new double[(int) num_keyframe][(int) order_p_1][(int) 4];
        for (int a = 0; a < this.num_keyframe; a++) {
            for (int b = 0; b < this.order_p_1; b++) {
                for (int c = 0; c < 4; c++) {
                    this.traject[a][b][c] = ins.readDouble();
                }
            }
        }
 
    }
 
    public uav_traject.uav_traject_t copy()
    {
        uav_traject.uav_traject_t outobj = new uav_traject.uav_traject_t();
        outobj.timestamp = this.timestamp;
 
        outobj.num_keyframe = this.num_keyframe;
 
        outobj.order_p_1 = this.order_p_1;
 
        outobj.t = new double[(int) num_keyframe];
        if (this.num_keyframe > 0)
            System.arraycopy(this.t, 0, outobj.t, 0, this.num_keyframe); 
        outobj.traject = new double[(int) num_keyframe][(int) order_p_1][(int) 4];
        for (int a = 0; a < this.num_keyframe; a++) {
            for (int b = 0; b < this.order_p_1; b++) {
                System.arraycopy(this.traject[a][b], 0, outobj.traject[a][b], 0, 4);            }
        }
 
        return outobj;
    }
 
}

